//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientApp.ExchangeService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BlockChainContract", Namespace="http://schemas.datacontract.org/2004/07/Exchange")]
    [System.SerializableAttribute()]
    public partial class BlockChainContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DomainModel.Block[] BlocksField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DomainModel.Block[] Blocks {
            get {
                return this.BlocksField;
            }
            set {
                if ((object.ReferenceEquals(this.BlocksField, value) != true)) {
                    this.BlocksField = value;
                    this.RaisePropertyChanged("Blocks");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExchangeRequest", Namespace="http://schemas.datacontract.org/2004/07/Exchange")]
    [System.SerializableAttribute()]
    public partial class ExchangeRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClientNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DomainModel.Transaction TransField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClientName {
            get {
                return this.ClientNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientNameField, value) != true)) {
                    this.ClientNameField = value;
                    this.RaisePropertyChanged("ClientName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DomainModel.Transaction Trans {
            get {
                return this.TransField;
            }
            set {
                if ((object.ReferenceEquals(this.TransField, value) != true)) {
                    this.TransField = value;
                    this.RaisePropertyChanged("Trans");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ExchangeService.IExchange", CallbackContract=typeof(ClientApp.ExchangeService.IExchangeCallback))]
    public interface IExchange {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IExchange/RegisterClient")]
        void RegisterClient(string clientName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IExchange/RegisterClient")]
        System.Threading.Tasks.Task RegisterClientAsync(string clientName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExchange/SetTransaction", ReplyAction="http://tempuri.org/IExchange/SetTransactionResponse")]
        void SetTransaction(int senderAccountId, int receiverAccountId, int amt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExchange/SetTransaction", ReplyAction="http://tempuri.org/IExchange/SetTransactionResponse")]
        System.Threading.Tasks.Task SetTransactionAsync(int senderAccountId, int receiverAccountId, int amt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExchange/GetBlockChain", ReplyAction="http://tempuri.org/IExchange/GetBlockChainResponse")]
        ClientApp.ExchangeService.BlockChainContract GetBlockChain();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExchange/GetBlockChain", ReplyAction="http://tempuri.org/IExchange/GetBlockChainResponse")]
        System.Threading.Tasks.Task<ClientApp.ExchangeService.BlockChainContract> GetBlockChainAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IExchangeCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IExchange/BroadcastTransectionToClient")]
        void BroadcastTransectionToClient(ClientApp.ExchangeService.ExchangeRequest exchangeRequest);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IExchangeChannel : ClientApp.ExchangeService.IExchange, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExchangeClient : System.ServiceModel.DuplexClientBase<ClientApp.ExchangeService.IExchange>, ClientApp.ExchangeService.IExchange {
        
        public ExchangeClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ExchangeClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ExchangeClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ExchangeClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ExchangeClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void RegisterClient(string clientName) {
            base.Channel.RegisterClient(clientName);
        }
        
        public System.Threading.Tasks.Task RegisterClientAsync(string clientName) {
            return base.Channel.RegisterClientAsync(clientName);
        }
        
        public void SetTransaction(int senderAccountId, int receiverAccountId, int amt) {
            base.Channel.SetTransaction(senderAccountId, receiverAccountId, amt);
        }
        
        public System.Threading.Tasks.Task SetTransactionAsync(int senderAccountId, int receiverAccountId, int amt) {
            return base.Channel.SetTransactionAsync(senderAccountId, receiverAccountId, amt);
        }
        
        public ClientApp.ExchangeService.BlockChainContract GetBlockChain() {
            return base.Channel.GetBlockChain();
        }
        
        public System.Threading.Tasks.Task<ClientApp.ExchangeService.BlockChainContract> GetBlockChainAsync() {
            return base.Channel.GetBlockChainAsync();
        }
    }
}
